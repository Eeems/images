#!/usr/bin/env bash

set -e
usage="$0 [OPTION]... IMAGESDIR [IMAGE] [TAG]
Build the Docker images under the IMAGESDIR directory. Optionally only build one image or tag
The build takes advantage of any reusable layer from previously built images.
Options:
    -h              Show this help message
    -f              Force rebuild
    -v              set -x
    -p              Prune between each build
    -g              Use github actions cache"

helpflag=
forceflag=
ghaflag=
pruneflag=

error() {
    echo "Error: $1" >&2
    exit 1
}
status() {
    echo "=> $1" >&2
}
image-name() {
    echo "$1:${2:-latest}"
}
group(){
    if [[ -n $ghaflag ]];then
        echo "::group::$1"
    fi
}
endgroup(){
    if [[ -n $ghaflag ]];then
        echo "::endgroup::"
    fi
}


while getopts hgfpv name; do
    case $name in
        h) helpflag=1 ;;
        f) forceflag=1 ;;
        g) ghaflag=1 ;;
        p) pruneflag=1 ;;
        v) set -x ;;
        *) error "Invalid option. Use the -h flag for more information." ;;
    esac
done

shift $((OPTIND - 1))

if [[ -n $helpflag ]]; then
    echo "$usage"
    exit
fi

if [[ $# -eq 0 ]]; then
    error "Missing IMAGESDIR arguments. Use the -h flag for more information."
fi

if [[ $# -gt 3 ]]; then
    error "Extraneous arguments. Use the -h flag for more information."
fi

imagesdir="$1"

has-element() {
    local needle="$1"
    shift
    for element; do
        if [[ $needle == "$element" ]]; then
            return 0
        fi
    done
    return 1
}
build-tag(){
    local name="$1"
    local tag="$2"
    group "$name:$tag"
    if ! [ -d "$tag" ];then
        echo "Folder $name/$tag not found"
        endgroup
        return
    fi
    pushd $tag > /dev/null
    local image="$(image-name "$name" "$2")"
    local target="eeems/$image"
    status "Checking image '$image'"
    local hash=$(md5sum Dockerfile)
    local updates=0
    local rebuild=0
    local latest="eeems/$(image-name "$name" latest)"
    local from=$latest
    local fromLine="$(head -n1 Dockerfile)"
    if [[ "$fromLine" == "#syntax=docker/dockerfile:1.4" ]]; then
        fromLine="$(head -n2 Dockerfile | tail -n1)"
    fi
    if [[ "ARG FROM" != "$fromLine" ]] && [[ "FROM" == "$(echo "$fromLine" | awk '{print $1}')" ]];then
      fromLine="$(echo "$fromLine" | awk '{print $2}')"
      from="${fromLine//$'\r'/}"
    fi
    if [[ -n $forceflag ]];then
        echo "  Force rebuild"
        rebuild=1
    elif ! docker pull "$target" &> /dev/null;then
        echo "  Image missing or could not be downloaded"
    elif [[ "$(docker run "$target" cat /hash 2> /dev/null)" != "$hash" ]];then
        echo "  Dockerfile changed"
        rebuild=1
    else
        if ! grep -q nobasecheck ../.config 2> /dev/null && [[ "$from" != "eeems/$name:"* ]] && docker pull "$from" | grep -q "Downloaded newer image";then
            echo "  New base image"
            rebuild=1
        fi
        if [ $rebuild -eq 0 ];then
            local output="$(docker run "$target" /usr/bin/checkupdates 2> /dev/null || true)"
            updates=$(echo "$output" | awk NF | wc -l)
            if [ $updates != 0 ];then
                echo "  $updates update(s) detected:"
                echo "$(echo -e "$output" | awk NF | sed 's/^/    /')"
            fi
        fi
    fi
    if [ $rebuild != 0 ] \
        || [ $updates != 0 ] \
        || ! docker manifest inspect $target &> /dev/null \
        || ! docker manifest inspect "registry.eeems.codes/$image" &> /dev/null; then
        status "Building image '$image'"
        echo "$hash" > .hash
        cat Dockerfile > .tmp.dockerfile
        echo "COPY .hash /hash" >> .tmp.dockerfile
        local cacheflags=
        if [ $rebuild != 0 ];then
            cacheflags="--no-cache"
        else
            cacheflags="--cache-from $from"
            if [ -n $ghaflag ];then
                cacheflags="$cacheflags --cache-from type=gha"
            fi
        fi
        if [ -n $ghaflag ];then
            cacheflags="$cacheflags --cache-to type=gha"
        fi
        if [ $rebuild == 0 ] && [ $updates != 0 ];then
            echo "# $(date)" >> .tmp.dockerfile
            echo "RUN /usr/local/bin/update" >> .tmp.dockerfile
        fi
        platform=local
        if grep -q platform= ../.config 2> /dev/null; then
            platform="$(
                grep platform= ../.config \
                | cut -d= -f2 \
                | tr "\n" "," \
                | sed 's/,*$//'
            )"
        fi
        docker buildx build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg "FROM=$from" \
            --platform "$platform" \
            $cacheflags \
            --load \
            --tag $target \
            --file .tmp.dockerfile $(pwd)
        rm .hash
        rm .tmp.dockerfile
        docker push $target
        docker tag $target "registry.eeems.codes/$image"
        docker push "registry.eeems.codes/$image"
    else
        echo "Skipping image '$image'";
    fi
    if grep -q removeafterpush ../.config 2> /dev/null && [[ "x$tag" != "xbase" ]];then
        docker rmi $target || true
        docker rmi "registry.eeems.codes/$image" || true
    fi
    if [ -n $pruneflag ];then
        docker system prune -f
    fi
    popd > /dev/null
    endgroup
}
build-image(){
    local start
    local name="$1"
    if ! [ -d "$name" ];then
        echo "Folder $name not found"
        return
    fi
    pushd "$name" > /dev/null
    if [[ $# -eq 1 ]];then
        local order=(latest)
        if [ -f .order ];then
            readarray -t order < .order
        fi
        for tag in "${order[@]}";do
            build-tag "$name" "$tag"
        done
        \ls | while read tag;do
            if [ -d "$tag" ] && ! has-element "$tag" "${order[@]}";then
                build-tag "$name" "$tag"
            fi
        done
    else
        build-tag "$name" "$2"
    fi
    popd > /dev/null
}

pushd "$imagesdir" > /dev/null
if [[ $# -eq 1 ]]; then
    \ls | while read name;do
        build-image "$name"
    done
elif [[ $# -eq 2 ]];then
    build-image "$2"
elif [[ $# -eq 3 ]];then
    build-image "$2" "$3"
else
    echo "Unknown number of arguments"
    echo "$usage"
fi
popd > /dev/null

status "Done"

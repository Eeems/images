#!/usr/bin/env bash

set -e
usage="$0 [OPTION]... IMAGESDIR
Build the Docker images under the IMAGESDIR directory.
The build takes advantage of any reusable layer from previously built images.
Options:
    -h              Show this help message."

helpflag=

error() {
    echo "Error: $1" >&2
    exit 1
}
status() {
    echo "=> $1" >&2
}
image-name() {
    echo "registry.eeems.codes/$1:${2:-latest}"
}


while getopts hp name; do
    case $name in
        h) helpflag=1 ;;
        *) error "Invalid option. Use the -h flag for more information." ;;
    esac
done

shift $((OPTIND - 1))

if [[ -n $helpflag ]]; then
    echo "$usage"
    exit
fi

if [[ $# -eq 0 ]]; then
    error "Missing IMAGESDIR arguments. Use the -h flag for more information."
fi

if [[ $# -gt 1 ]]; then
    error "Extraneous arguments. Use the -h flag for more information."
fi

imagesdir="$1"

# Enable BuildKit for better cache behavior
# See <https://docs.docker.com/engine/reference/builder/#buildkit>
export DOCKER_BUILDKIT=1

docker-build(){
    image="$1"
    target="$(image-name "$image" "$2")"
    status "Checking image '$target'"
    if [[ "$(docker inspect "$target" 2> /dev/null)" == "[]" ]];then
        echo "  Image missing"
        updates = 1
    elif [[ "$(grep "\S" --color=none Dockerfile)" != "$(docker run -v /var/run/docker.sock:/var/run/docker.sock --rm cucker/image2df "$target" 2> /dev/null | tail -n +3 | sed 's|# buildkit$||g')" ]];then
        echo "  Dockerfile changed"
        updates=1
    else
        updates=$(docker run "$target" /usr/bin/checkupdates 2> /dev/null | wc -l)
        if [ $updates != 0 ];then
            echo "  Updates detected"
        fi
    fi
    if [ $updates != 0 ];then
        status "Building image '$target'"
        docker image build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg FROM="$(image-name "$image" latest)" \
            --no-cache \
            --tag "$target" .
        docker image push "$target"
    fi
}

pushd "$imagesdir" > /dev/null
\ls | while read image;do
    pushd "$image" > /dev/null
    pushd latest > /dev/null
    docker-build "$image" latest
    popd > /dev/null
    \ls | while read tag;do
        if [[ "$tag" != "latest" ]];then
            pushd "$tag" > /dev/null
            docker-build "$image" "$tag"
            popd > /dev/null
        fi
    done
    popd > /dev/null
done
popd > /dev/null

status "Done"
